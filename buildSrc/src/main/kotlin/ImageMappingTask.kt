import org.gradle.api.DefaultTask
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.TaskAction
import java.io.File
import java.nio.charset.Charset

abstract class ImageMappingTask : DefaultTask() {

    @get:Input
    abstract val folderWithDrawables: Property<File>

    @TaskAction
    fun generateImageMap() {
        val rootDir = this.project.rootDir
        val pathForImageExtension = "$rootDir/app/src/main/java/redtoss/example/furstychristmas/ui/util/InfoPageUtil.kt"
        val map = mutableMapOf<String, String>()

        try {
            val imageFiles = folderWithDrawables.get().listFiles { _, name -> name.endsWith(".png") || name.endsWith(".jpg") || name.endsWith(".jpeg") }
            imageFiles.forEach {
                val newName = it.name
                    .replace(".png", "")
                    .replace(".jpg", "")
                    .replace(".jpeg", "")
                map[newName] = "R.drawable.$newName"
            }
        } catch (e: Exception) {
            println("could not read drawable resources")
        }
        val mapText = map.entries.joinToString(separator = "\n") { "\t\t\"${it.key}\" -> ${it.value}" }
        val sourceCode = generateInfoPageUtilSourceCode("ImageMappingTask", mapText)
        try {
            val file = File(pathForImageExtension)
            if (!file.parentFile.exists()) {
                file.parentFile.createNewFile()
                println("${file.parentFile} created")
            }
            if (file.exists()) {
                file.delete()
                println("$file deleted")
            }
            if (!file.exists()) {
                file.createNewFile()
                println("$file created")
            }
            file.writeText(text = sourceCode, charset = Charset.defaultCharset())
        } catch (e: Exception) {
            println("creating Mapping for Images failed: $e")
        }
    }


    private fun generateInfoPageUtilSourceCode(gradleTaskName: String, imageMap: String) = """
package redtoss.example.furstychristmas.ui.util

import redtoss.example.furstychristmas.R
import redtoss.example.furstychristmas.domain.info.model.InfoPageContent
import timber.log.Timber

/**
* This utility method is generated by gradle task '$gradleTaskName'
*/
internal fun InfoPageContent.resolveImageId(imageid: String?): Int? {
    return when (imageid) {
$imageMap
        else -> {
            if (!imageid.isNullOrBlank()) {
                Timber.w("Imageid: ${'$'}imageid could not be resolved!")
            }
            null
        }
    }
}
    """

}
